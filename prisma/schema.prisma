generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ステータス用のenum
enum WorkStatus {
  WORKING   @map("working")
  COMPLETED @map("completed") 
  PAUSED    @map("paused")
}

// ヘルスチェック用のモデル
model HealthCheck {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
}

// プロジェクト
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // リレーション
  tags        Tag[]
  works       Work[]

  @@map("projects")
}

// 作業のタグ
model Tag {
  id        String   @id @default(cuid())
  projectId String   @map("project_id")
  name      String
  color     String   @default("#667eea")
  createdAt DateTime @default(now()) @map("created_at")
  
  // リレーション
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tags")
}

// 作業記録
model Work {
  id            String    @id @default(cuid())
  projectId     String    @map("project_id")
  userName      String    @map("user_name")
  plannedTask   String?   @map("planned_task")
  finishTask    String?   @map("finish_task")
  remindTask String?   @map("remind_task")
  status        WorkStatus @default(WORKING)  // enumを使用
  startedAt     DateTime  @default(now()) @map("started_at")
  endedAt       DateTime? @map("ended_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // リレーション
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("work")
}

